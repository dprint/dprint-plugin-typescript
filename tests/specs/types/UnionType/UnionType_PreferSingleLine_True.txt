~~ lineWidth: 40, unionAndIntersectionType.preferSingleLine: true ~~
== should format ==
export type T = string|number;

[expect]
export type T = string | number;

== should be single line when hanging ==
export type T = string | test
    | other;

[expect]
export type T = string | test | other;

== should revert back to single line when below the line width ==
export type T =
    | string
    | test
    | other;

[expect]
export type T = string | test | other;

== should be multi line when over the line width ==
export type T = string | test | other1 | other2 | other3;

[expect]
export type T =
    | string
    | test
    | other1
    | other2
    | other3;

== should be single line if the final type has a trailing comment ==
export type T = string | number // TODO
function f(
    arg: "1" | "2", // todo
    otherArg: string,
) {}

[expect]
export type T = string | number; // TODO
function f(
    arg: "1" | "2", // todo
    otherArg: string,
) {}

== should be multi line if any type apart from the final type has a trailing comment ==
export type T = string|number // TODO
  | foo | bar

[expect]
export type T =
    | string
    | number // TODO
    | foo
    | bar;
