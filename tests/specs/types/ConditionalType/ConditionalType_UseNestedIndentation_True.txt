~~ lineWidth: 80, conditionalType.useNestedIndentation: true ~~
== should handle nested indentation with extends and mapped types ==
export type R<S> = S extends Record<string, T<any, any>> ? { [K in keyof S]: ReturnType<S[K][1]> } : S extends T<infer _T, any>
? _T extends Array<infer I>
? I
: _T : S extends SZ<infer _T, any> ? _T : S extends DZ<infer _T>
? _T : never;

[expect]
export type R<S> = S extends Record<string, T<any, any>>
    ? { [K in keyof S]: ReturnType<S[K][1]> }
    : S extends T<infer _T, any>
        ? _T extends Array<infer I>
            ? I
            : _T
        : S extends SZ<infer _T, any> ? _T
            : S extends DZ<infer _T>
                ? _T
                : never;

== should keep on single line if fits on a single line ==
type Test = A extends B ? C extends D ? c : d : e;

[expect]
type Test = A extends B ? C extends D ? c : d : e;
