~~ quoteProps: asNeeded ~~
== should preserve quotes when necessary ==
const objectLiteral = {
    "foo bar": true,
    "foo\nbar": true,
    "1foo": true,
    "ðŸ’©": true,
    "aðŸ’©": true,
    "c\d": true,
    "1": true,
    "1foo"() {},
    get "2foo"() {},
    set "2foo"(v) {},
    async "3foo"() {},
};
class Class {
    "1foo"() {}
    get "1foo"() {}
    set "1foo"() {}
    async "3foo"() {}
    "4foo": string;
    "1" = true;
}
interface Interface {
    "1foo": string;
    "2foo"(): string;
    get "3foo"(): string;
    set "3foo"(v: string);
}
type Type = {
    "1foo": string;
    "2foo"(): string;
    get "3foo"(): string;
    set "3foo"(v: string);
};

[expect]
const objectLiteral = {
    "foo bar": true,
    "foo\nbar": true,
    "1foo": true,
    "ðŸ’©": true,
    "aðŸ’©": true,
    "c\d": true,
    "1": true,
    "1foo"() {},
    get "2foo"() {},
    set "2foo"(v) {},
    async "3foo"() {},
};
class Class {
    "1foo"() {}
    get "1foo"() {}
    set "1foo"() {}
    async "3foo"() {}
    "4foo": string;
    "1" = true;
}
interface Interface {
    "1foo": string;
    "2foo"(): string;
    get "3foo"(): string;
    set "3foo"(v: string);
}
type Type = {
    "1foo": string;
    "2foo"(): string;
    get "3foo"(): string;
    set "3foo"(v: string);
};

== should remove quotes when unnecessary ==
const objectLiteral = {
    "foo": true,
    "$": true,
    "_": true,
    "_1": true,
    'foo': true,
    '$': true,
    '_': true,
    '_1': true,
    'Ã©': true,
    "foo"() {},
    get "foo2"() {},
    set "foo2"(v) {},
    async "foo3"() {},
    "test": "literal",
};
class Class {
    "foo"() {}
    get "foo2"() {}
    set "foo2"() {}
    async "foo3"() {}
    "foo4": string;
    "test": "literal" = "literal";
}
interface Interface {
    "foo": string;
    "foo2"(): string;
    get "foo3"(): string;
    set "foo3"(v: string);
    "foo4": "literal";
}
type Type = {
    "foo": string;
    "foo2"(): string;
    get "foo3"(): string;
    set "foo3"(v: string);
    "foo4": "literal";
};

[expect]
const objectLiteral = {
    foo: true,
    $: true,
    _: true,
    _1: true,
    foo: true,
    $: true,
    _: true,
    _1: true,
    Ã©: true,
    foo() {},
    get foo2() {},
    set foo2(v) {},
    async foo3() {},
    test: "literal",
};
class Class {
    foo() {}
    get foo2() {}
    set foo2() {}
    async foo3() {}
    "foo4": string;
    "test": "literal" = "literal";
}
interface Interface {
    foo: string;
    foo2(): string;
    get foo3(): string;
    set foo3(v: string);
    foo4: "literal";
}
type Type = {
    foo: string;
    foo2(): string;
    get foo3(): string;
    set foo3(v: string);
    foo4: "literal";
};
